#!/bin/bash

# Basic help function
help()
{
  cat <<EOF
batman, a battery management program originally intended for Droidian

Usage: batman
EOF
  exit 0
}

# Bumped at every commit
version()
{
   echo "0.36"
   exit 0
}

# First check if user is asking for help or version if not move on.
case "$1" in
  -h|-\?|--help)
    help
    ;;
  -v|--version)
    version
    ;;
esac

# CORE_FIRST will read cpuinfo and get the first cpu core number at boot. (we know its 0 but just in case to be 100% safe)
# CORE_LAST will read cpuinfo and get the last cpu core number at boot.
# UIDS will list users from /run/user to later use with wlr-randr.
# DEFAULT_GOVERNOR stores the default cpu governor used by the device.
# AVUSER will get the number of active user sessions. It's used later on to make sure there is only one active user with a session.
# AVPOL will check for the amount of cpu policy groups. It's used later on to disable offlining on devices with a single group.
# FIRSTPOL will get the first policy group. (this group stores LITTLE cores)
# FIRSTPOLCORE will get the first cpu core of policy group one.
# LASTPOLCORE will get the last cpu core of policy group one.
# UPTIME is just uptime of the system in minutes.
CORE_FIRST=$(awk '$1 == "processor" {print $3; exit}' /proc/cpuinfo)
CORE_LAST=$(awk '$1 == "processor" {print $3}' /proc/cpuinfo | tail -1)
UIDS=$(ls /run/user | head -1)
DEFAULT_GOVERNOR=$(</sys/devices/system/cpu/cpu0/cpufreq/scaling_governor)
AVUSER=$(ls /run/user | wc -l)
AVPOL=$(ls /sys/devices/system/cpu/cpufreq | grep -c policy)
FIRSTPOL=$(ls /sys/devices/system/cpu/cpufreq | grep policy | head -1)
FIRSTPOLCORE=$(cut -c1 - < /sys/devices/system/cpu/cpufreq/$FIRSTPOL/related_cpus)
LASTPOLCORE=$(awk '{for(i=NF;i>=1;i--) printf("%s ", $i)}' /sys/devices/system/cpu/cpufreq/$FIRSTPOL/related_cpus | cut -c1 -)
UPTIME=$(awk '{print int($1)/60}' /proc/uptime | cut -f 1 -d .)

# Make sure the required directory exists.
if [ ! -d /var/lib/batman/ ]; then
   mkdir -p /var/lib/batman/
fi

# Parse our config file.
if [ -f /var/lib/batman/config ]; then
   . /var/lib/batman/config
else
   echo "config file does not exist. using default values"
fi

# Check if there are any policies available.
if [[ "$AVPOL" == "0" ]]; then
   echo "no cpu policies available. exiting"
   exit 0
fi

# Check if powersave governor is available.
if grep powersave /sys/devices/system/cpu/cpufreq/$FIRSTPOL/scaling_available_governors &> /dev/null; then
   true
else
   echo "powersave is not a governor on this system. exiting"
   exit 0
fi

# Make sure wlr-randr is installed on the system.
# if it was check if system is using a wlroots based desktop environment.
if [[ $(which wlr-randr) ]]; then
   XDG_RUNTIME_DIR=/run/user/$UIDS/ wlr-randr &> /var/lib/batman/wlr-randr

   if grep "compositor doesn't support" /var/lib/batman/wlr-randr &> /dev/null; then
      WLROOTS=false
   else
      WLROOTS=true
   fi

else
   echo "wlr-randr does not exist."
   exit 0
fi

# Check if system is using KDE Plasma.
if [[ $(which kscreen-doctor) ]]; then

   if XDG_SESSION_TYPE=wayland XDG_RUNTIME_DIR=/run/user/$UIDS/ kscreen-doctor -o | grep Output &> /dev/null; then
      KDE=true
   else
      KDE=false
   fi

else
   KDE=false
fi

# if none of the supported methods are supported then exit.
if [ "$KDE" == "false" ] && [ "$WLROOTS" == "false" ]; then
   echo "Display server not supported. exiting"
   exit 0
fi

# Use our AVUSER variable to make sure only one active user session exists.
if [[ "$AVUSER" -gt "1" ]]; then
   echo "more than one user active."
   exit 0
fi

# Make sure that our OFFLINE variable is set from the config file if not use default value.
if [ -z "$OFFLINE" ]; then
   OFFLINE=true
fi

# Use our AVPOL variable to make sure our device has more than one policy groups.
# If there was only one set the variable to not offline any cpu cores.
if [[ "$AVPOL" -eq "1" ]]; then
   OFFLINE=false
fi

# Make sure that our POWERSAVE variable is set from the config file if not use default value.
if [ -z "$POWERSAVE" ]; then
   POWERSAVE=true
fi

# Make sure that our MAX_CPU_USAGE variable is set from the config file if not use default value.
if [ -z "$MAX_CPU_USAGE" ]; then
   MAX_CPU_USAGE=60
fi

# Make sure that our CHARGESAVE variable is set from the config file if not use default value.
if [ -z "$CHARGESAVE" ]; then
   CHARGESAVE=false
fi

# Make sure that our GPUSAVE variable is set from the config file if not use default value.
if [ -z "$GPUSAVE" ]; then
   GPUSAVE=true
fi

# DEFAULT_GPU_GOVERNOR will get the default gpu governor.
# Check if gpu governor file exists.
if [ ! -d /sys/kernel/gpu/gpu_governor ]; then
   GPUSAVE=false
elif [ "$GPUSAVE" == "true" ]; then
   DEFAULT_GPU_GOVERNOR=$(</sys/kernel/gpu/gpu_governor)
fi

# Copy default governor to a file to use it later on if the service gets restarted unexpectedly.
if [[ "$UPTIME" -le "1" ]]; then

   if [ "$DEFAULT_GOVERNOR" == "powersave" ]; then
      echo "bad starting governor. exiting"
   else
      echo $DEFAULT_GOVERNOR > /var/lib/batman/default_cpu_governor
   fi

   if [ "$GPUSAVE" == "true" ]; then
      echo $DEFAULT_GPU_GOVERNOR > /var/lib/batman/default_gpu_governor
   fi

fi

# if for some reason the service got restarted unexpectedly at a bad time use the correct values for governors.
if [[ "$DEFAULT_GOVERNOR" == "powersave" ]]; then
   DEFAULT_GOVERNOR=$(</var/lib/batman/default_cpu_governor)

   if [ "$GPUSAVE" == "true" ]; then
      DEFAULT_GPU_GOVERNOR=$(</var/lib/batman/default_gpu_governor)
   fi

fi

# Function that sets the cpu governor to powersave
function powersave() {
    for ((i=$CORE_FIRST;i<=$CORE_LAST; i++))
    do
        echo "powersave" > /sys/devices/system/cpu/cpu$i/cpufreq/scaling_governor
    done
}

# Function that sets the cpu governor to the default value. (schedutil as an example)
function default() {
    for ((i=$CORE_FIRST;i<=$CORE_LAST; i++))
    do
         echo "$DEFAULT_GOVERNOR" > /sys/devices/system/cpu/cpu$i/cpufreq/scaling_governor
    done
}

# This function sets cpu cores in policy group one to offline.
function offline() {
    for ((i=$FIRSTPOLCORE;i<=$LASTPOLCORE; i++))
    do
         echo "0" > /sys/devices/system/cpu/cpu$i/online
    done
}

# This function sets cpu cores in policy group one to offine
function online() {
    for ((i=$FIRSTPOLCORE;i<=$LASTPOLCORE; i++))
    do
         echo "1" > /sys/devices/system/cpu/cpu$i/online
    done
}

# Check if gpu governor file exists if so add gpusave function to change the governor.
# Basic function that sets gpu back to its default governor.
if [ "$GPUSAVE" == "true" ]; then

   function gpusave() {
       echo $DEFAULT_GPU_GOVERNOR > /sys/kernel/gpu/gpu_governor
   }

else

   function gpusave() {
       true
   }

fi

# Check if gpu governor file exists if so add gpudefault function to change the governor.
# Basic function that sets gpu back to its default governor.
if [ "$GPUSAVE" == "true" ]; then

   function gpudefault() {
       echo $DEFAULT_GPU_GOVERNOR > /sys/kernel/gpu/gpu_governor
   }

else

   function gpudefault() {
       true
   }

fi

# This clears the screen status whether or not it is off.
echo "" > /var/lib/batman/screen

# Give ownership of /var/lib/batman to the user id available in /run/user.
chown $UIDS:$UIDS /var/lib/batman -R

while [[ true ]]
do
    # Save screen status of the last run to a variable so that we can use it later in our checks. (will be filled after the first run)
    SCREEN_OLD=$(</var/lib/batman/screen)
    # Get cpu usage from /proc/stat
    CPU_USAGE=$(awk '{u=$2+$4; t=$2+$4+$5; if (NR==1){u1=u; t1=t;} else print ($2+$4-u1) * 100 / (t-t1) ; }' <(grep 'cpu ' /proc/stat) <(sleep 0.2; grep 'cpu ' /proc/stat) | cut -d "." -f1)

    # Run the correct command to get screen status
    # Save screen status to a variable so that we can use it later in our checks.
    if [ "$WLROOTS" == "true" ]; then
       SCREEN=$(XDG_RUNTIME_DIR=/run/user/$UIDS/ wlr-randr | sed -n '/Enabled/s/^.\{11\}//p')
    elif [ "$KDE" == "true" ]; then
       DISPSTAT=$(XDG_SESSION_TYPE=wayland XDG_RUNTIME_DIR=/run/user/$UIDS kscreen-doctor -j | awk '/enabled/{print substr(reverse($0), 3, length($0)-24)}')

       if [ "$DISPSTAT" == "true" ]; then
          SCREEN="yes"
       else
          SCREEN="no"
       fi

    fi

    # if variable FIRSTPOLCORE=$(cut -c1 - < /sys/devices/system/cpu/cpufreq/$FIRSTPOL/related_cpus)
    if [ "$CHARGESAVE" == "true" ]; then
        CHARGE="discharging"
    else
        # Check if device is plugged into a power source.
        CHARGE=$(upower -d | awk '{if(/state/){if(!seen[$0]){seen[$0]=1;print substr($0,26);exit}}}')
    fi

    # Check if powersave should be enabled.
    if [ "$POWERSAVE" == "true" ]; then

       # if screen is off and device is not charging then device will be set into powersave
       if [ "$SCREEN_OLD" != "$SCREEN" ] && [ "$CHARGE" == "discharging" ] && [ "$SCREEN" == "no" ]; then
          powersave
          gpusave
       # if device is charging or fully charged and still plugged into the wall then set everything back to default.
       elif [ "$SCREEN_OLD" != "$SCREEN" ] && [ "$CHARGE" == "charging" ] || [ "$CHARGE" == "fully-charged" ]; then
          default
          gpudefault
       # if screen is on (user using the device) set everything back to default.
       elif [ "$SCREEN" == "yes" ]; then
          default
          gpudefault
       fi

    fi

    # Save the current governor (check what has happened in the last run) so that if it is set to powersave we can use this info in our cpu offlining.
    CUR_GOVERNOR=$(</sys/devices/system/cpu/cpu0/cpufreq/scaling_governor)

    # Use our OFFLINE variable to see if this process should even be started.
    if [ "$OFFLINE" == "true" ]; then

       # if device is not plugged into a power source and screen is off and cpu usage is less than 40% (as an example user is not listening to some youtube video) then set cpu to offline.
       if [ "$SCREEN_OLD" != "$SCREEN" ] && [ "$CHARGE" == "discharging" ] && [ "$SCREEN" == "no" ] && [ "$CPU_USAGE" -le "$MAX_CPU_USAGE" ]; then
          offline
       # if screen or on or current governor is the same as default governor or cpu usage is higher than 40% set cpu cores to online. (all cases to not set cpu cores to offline accidentally)
       elif [ "$SCREEN" == "yes" ] || [ "$CUR_GOVERNOR" == "$DEFAULT_GOVERNOR" ] || [ "$CPU_USAGE" -gt "$MAX_CPU_USAGE" ]; then
          online
       # if device is powersave (which means device is sleeping) then set cpu cores to offline.
       elif [ "$SCREEN_OLD" == "$SCREEN" ] && [ "$CUR_GOVERNOR" == "powersave" ]; then
          offline
       fi

    fi

    # Put old status of screen into a file so that we can use it in the next run of this loop to lower cpu and memory usage later on.
    if [ "$SCREEN_OLD" != "$SCREEN" ]; then
       echo $SCREEN > /var/lib/batman/screen
    fi

    sleep 0.3

done
